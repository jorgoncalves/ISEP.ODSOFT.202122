import de.fntsoftware.gradle.MarkdownToPdfTask

// (ATB)

plugins {
    id "de.esoco.gwt" version "1.1.1"
    id 'info.solidsoft.pitest' version '1.7.0'
    id "de.fntsoftware.gradle.markdown-to-pdf" version "1.1.0"
    id "com.github.spotbugs" version "5.0.4"
}

apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'checkstyle'
//apply plugin: 'findbugs'
apply plugin: 'de.fntsoftware.gradle.markdown-to-pdf'

//Java version compatibility to use when compiling Java source.
sourceCompatibility = 1.8
//Java version to generate classes for.
targetCompatibility = 1.8
//Script Version
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.easymock:easymock:2.5.2'
    testImplementation 'com.google.gwt:gwt-dev:2.9.0'
    testImplementation 'com.google.gwt:gwt-user:2.9.0'
    implementation 'net.sourceforge.plantuml:plantuml:8001'
    // For JPA / Eclipselink
    implementation 'org.eclipse.persistence:eclipselink:2.6.1'
    implementation 'org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:2.6.1'
    implementation 'com.h2database:h2:1.4.191'
}

// This two lines are required so that the java compiler finds the persistence.xml file during compilation
sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDirs.asPath
compileJava.dependsOn(processResources)

javadoc {
    options.addStringOption("sourcepath", "")
}

//Mutation Tests
pitest {
    targetClasses = ['pt.isep.cms.*']  //by default "${project.group}.*"
    pitestVersion = '1.7.0' //not needed when a default PIT version should be used
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false

}


gwt {

    module 'pt.isep.cms.Showcase'

    gwtVersion = '2.9.0'

    compile {
        sourceLevel = '1.8'
    }

    jetty {
        /** enable debugging. */
        debugJava = true
        /** debug port to listen. */
        debugPort = 8000
        /** wait for debugger attachment. */
        debugSuspend = false
    }
}

// Jacoco
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
}

// This task generates the coverage report for the integration tests.
// Notice that it only includes data about the server code sice Jaccoco is not able to get data about cliente code that is transpiled to javascript
task jacocoIntegrationReport(type: JacocoReport) {
    sourceSets sourceSets.main

    executionData(files("${buildDir}/jacoco/integrationTest.exec"))

    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
}

// Integration Tests
task integrationTest(type: Test) {
    filter {
        //all GWT unit tests, by naming convention
        includeTestsMatching "*GWTTest*"
    }
    jacoco {
        enabled = true
        excludes = ["com/steadystate/**"]
    }
    // These Properties are required to run gwt integration tests
    systemProperties['gwt.args'] = "-devMode -logLevel WARN -war www-test"
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

checkstyle {
    toolVersion '7.8.1'
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures = true
}

checkstyleMain {
    source ='src/main/java'
}

checkstyleTest {
    source ='src/test/java'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled false
    }
}

/*findbugs {
    ignoreFailures = true
    toolVersion = "3.0.1"
    sourceSets=[sourceSets.main]
    excludeFilter = file("config/findbugs/excludeFilter.xml")
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled true
        html.enabled false
    }
}*/

spotbugs {
    ignoreFailures = true
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

test {
    filter {
        includeTestsMatching "*JRETest*"
    }
    jacoco {
        enabled = true
    }
}

task pdfFromMarkdown(type: MarkdownToPdfTask) {
    inputFile = file('../../odsoft/class_assignment_final/README.md')
    outputFile = file('../../odsoft/class_assignment_final//README.pdf')
}

task zipCMSProject(type: Zip) {
    from '../../'
    // code
    exclude '/project/cms_students/.gradle/'
    exclude '/project/cms_students/.idea/'
    exclude '/project/cms_students/bin/'
    exclude '/project/cms_students/build/'
    exclude '/project/cms_students/gwt-unitCache/'
    exclude '/project/cms_students/www-test/'
    include '/project/cms_students/**'
    // documentation
    include '/odsoft/class_assignment_final/**/**'
    archiveName 'cms_project.zip'
    destinationDir(file('/../../'))
}
